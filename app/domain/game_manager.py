from typing import List
from enum import Enum
from .color import Color
from .move import Move
from .board import Board
from .position import Position
from .pieces import PieceFactory

class GameState(Enum):
    ONGOING = 1
    CHECK = 2
    CHECKMATE = 3
    STALEMATE = 4
    DRAW = 5


class GameManager:
    def __init__(self, players: List[str]):
        self.players = players
        self.current_turn: Color = Color.WHITE
        self.state: GameState = GameState.ONGOING
        self.board: "Board" = self._initialize_board()
        self.move_history: List[Move] = []

    def _initialize_board(self) -> "Board":
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–æ—Å–∫–∏

        :return: –æ–±—ä–µ–∫—Ç –¥–æ—Å–∫–∏ —Å —Ä–∞—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —Ñ–∏–≥—É—Ä–∞–º–∏
        """
        board = Board(12, 8, 3)
        symbols = {
            "sylf": "üòá",
            "gryphon": "ü¶Ö"
        }
        start_positions = {
            ("sylf", Color.WHITE): [Position(x, 1, 2) for x in range(0, 11, 2)],
            ("sylf", Color.BLACK): [Position(x, 6, 2) for x in range(0, 11, 2)],
            ("gryphon", Color.WHITE): [Position(2, 0, 2), Position(10, 0, 2)],
            ("gryphon", Color.BLACK): [Position(2, 7, 2), Position(10, 7, 2)]
        }
        for (piece_name, color), positions in start_positions.items():
            board.register_start_positions(piece_name, color, positions)
            for pos in positions:
                piece = PieceFactory.create_piece(piece_name, pos, color, symbols[piece_name])
                board.place_piece(piece)
        return board

    def make_move(self, move: Move) -> bool:
        """

        :param move: –æ–±—ä–µ–∫—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ö–æ–¥–∞
        :return: True, –µ—Å–ª–∏ —Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
        """
        pass

    def undo_move(self) -> None:
        """
        –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥, –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        """
        pass

    def is_check(self, color: Color) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ü–≤–µ—Ç–æ–º –ø–æ–¥ —à–∞—Ö–æ–º
        :param color: —Ü–≤–µ—Ç –∏–≥—Ä–æ–∫–∞
        :return: True, –µ—Å–ª–∏ —à–∞—Ö, –∏–Ω–∞—á–µ False
        """
        pass

    def switch_turn(self) -> None:
        """
        –°–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ (—Ö–æ–¥)
        """
        self.current_turn = Color.BLACK if self.current_turn == Color.WHITE else Color.WHITE

    def get_valid_moves(self, position: str) -> List[Move]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö–æ–¥–æ–≤ –¥–ª—è —Ñ–∏–≥—É—Ä—ã –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        :param position:
        :return:
        """

    def get_game_state(self) -> GameState:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫–µ—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã (–∏–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è, —à–∞—Ö, –º–∞—Ç –∏ —Ç.–¥.)
        :return:
        """
        pass

    def __str__(self) -> str:
        """–ß–∏—Ç–∞–µ–º–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å–∫–∏ –∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""

        pass